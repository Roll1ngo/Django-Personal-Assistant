Як працювати з  репозиторієм (GitHub)

	1)  створення репозиторія для командного проєкту 
2)  налаштування репозиторію
	3)  розробка фічі або багфікс
	4)  видалення гілок    
5)  вирішення git-конфліктів 
6)  список команд для роботи з терміналом 

Як Ви пам’ятаєте, Git – це програмне забезпечення для контролю версій, яке зробить співпрацю з колегами по команді дуже простою. 

Тому розпочнемо саме з

створення репозиторія для командного проєкту
Тімлід створює пустий публічний репозиторій для проєкту на своєму GitHub-акаунті


налаштування репозиторію
На сторінці вже створеного репозиторію Тімлід заходить до Settings  та вносить наступні зміни
на вкладці General у секції Pull Requests ставить чек поряд з Automatically delete head branches
                     
У вкладці Branches у розділі Branch protection rules встановлює правила для гілки main
Тімлід у вкладці Collaborators додає членів команди в репозиторій. Кожному буде надіслано інвайт на пошту.
після чого усі розробники з команди клонують репозиторій, створений Тімлідом.

розробка фічі або багфікс
кожна фіча або багфікс виконується окремою гілкою.
перед початком роботи над новою фічею або багфіксом оновлюємо локальний main, щоб він був ідентичний main на GitHub. Для цього переходимо на гілку main і стягуємо останні зміни, щоб синхронізувати локальну гілку з тією, що на GitHub.
робимо нову гілку з main. Рекомендується давати назву гілки за шаблоном feature/назва-фічі та bugfix/назва-бага.
працюємо у цій гілці та вносимо необхідні зміни. Комітимо зміни за потребою.
після того, як фіча готова, відправляємо історію (комміти) локальної гілки на GitHub і відкриваємо Pull request.
призначаємо мінімум одного Reviewer, щоб зробив рев?ю коду.
якщо необхідне редагування, робимо його у тій самій гілці і відправляємо зміни на GitHub. Поточний Pull request оновиться автоматично, відкривати новий не треба.
після того як Pull request пройшов рев?ю коду, тімлід приймає його (мержить у гілку main).
після того, як Pull request був прийнятий, розробник переходить на гілку main і стягує останні зміни, щоб синхронізувати локальну гілку з тією, що на GitHub. 
після синхронізації гілки main розробник видаляє свою локальну гілку фічі/бага в GitHub Desktop.
після злиття коду в main, проєкт повинен успішно компілюватися та збиратися. Ситуація, коли Pull request прийнятий, злитий, а проєкт не збирається - epic fail
забороняється безпосередньо заливати код у гілку main

4) видалення гілок
щоб видалити гілку через термінал
git branch -d <назва_гілки>  - видалити гілку
git push origin --delete <назва_гілки> - видалити гілку на віддаленому репозиторії

5) вирішення git-конфліктів
Конфлікти відбуваються коли два розробники одночасно змінюють один і той же рядок в одному тому самому файлі. Виникають під час Pull Request, через що він не може бути успішно доданий у базову гілку. Конфлікти бажано вирішувати локально, а не на GitHub. Для цього 
    у терміналі 
    git checkout  main
git pull
git checkout ‘назва-вашої-гілки’
git merge main
Вирішуємо конфлікт і робимо коміт. Після чого відправляємо зміни на GitHub, щоб оновити  Pull Request.

6) список команд для роботи з терміналом
         git clone https://посилання_на_репозиторій клонуєте репозиторій  
 	         git checkout ‘назва-гілки’ перехід на гілку ‘назва-гілки’
         git pull origin ‘назва-гілки’ стягує останні зміни гілки ‘назва-гілки’
         git checkout -b ‘назва-нової-гілки’ створює нову гілку 
         git add . та  git commit -m “назва-коміта” записує зміни до локальної гілки
         git push origin ‘назва-вашої-гілки’ публікує ваші зміни на гілці віддаленого репозиторію
         git merge ‘назва-гілки’ залиття коду з гілки ‘назва-гілки’ на поточну гілку
                    git branch -d ‘назва-гілки’ видалення гілки ‘назва-гілки’
         git fetch  стягує всі зміни з віддаленого репозиторію